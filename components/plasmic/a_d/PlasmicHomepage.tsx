// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fZQjHDXfvRHecPEKdBKMAp
// Component: ZgOSo1iJt2Xs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent
import Participacao from "../../Participacao"; // plasmic-import: 1Lxx3fZBCA/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic_plasmic_kit_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_a_d.module.css"; // plasmic-import: fZQjHDXfvRHecPEKdBKMAp/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: ZgOSo1iJt2Xs/css

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  tilt?: p.Flex<typeof Tilt>;
  participacao?: p.Flex<typeof Participacao>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5Wjgb
            )}
          >
            {"Adoração e Discipulado 2023"}
          </div>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__zguL)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rylUe
                )}
              >
                {"Enter some text"}
              </div>
            </div>
          ) : null}
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__a7YD3
            )}
          >
            {"Participações"}
          </div>
          {true ? (
            <ParallaxWrapper
              className={classNames("__wab_instance", sty.scrollParallax__pgXN)}
              previewInEditor={false}
              speed={20 as const}
            >
              <Tilt
                data-plasmic-name={"tilt"}
                data-plasmic-override={overrides.tilt}
                className={classNames("__wab_instance", sty.tilt)}
                tiltMaxAngleX={20 as const}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__g79Cu)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://placekitten.com/300/200" as const}
                />
              </Tilt>
            </ParallaxWrapper>
          ) : null}
          {true ? (
            <ParallaxWrapper
              className={classNames(
                "__wab_instance",
                sty.scrollParallax__saDuF
              )}
              previewInEditor={false}
              speed={20 as const}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__lmwTl)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://placekitten.com/300/200" as const}
              />
            </ParallaxWrapper>
          ) : null}
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__t11Mz
            )}
          >
            {"Faca sua inscricao"}
          </div>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__aRPkP)}>
              {true ? (
                <Participacao
                  data-plasmic-name={"participacao"}
                  data-plasmic-override={overrides.participacao}
                  className={classNames("__wab_instance", sty.participacao)}
                />
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__nPwdI)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__yAf3U)}
                    direction={"right" as const}
                    reverse={false}
                    triggerOnce={false}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__guHao)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      src={"https://placekitten.com/300/200" as const}
                    />
                  </Reveal>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yFwQ5
                    )}
                  >
                    {"Jan Gottfridsson"}
                  </div>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__ukq1O)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yhmje
                    )}
                  >
                    {"Asaph Borba"}
                  </div>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__jnh1G)}
                    direction={"right" as const}
                    reverse={false}
                    triggerOnce={false}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__uw5Yn)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      src={"https://placekitten.com/300/200" as const}
                    />
                  </Reveal>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__m1X3)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__lgvi)}
                    direction={"right" as const}
                    reverse={false}
                    triggerOnce={false}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___1NMaM)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      src={"https://placekitten.com/300/200" as const}
                    />
                  </Reveal>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nqLtN
                    )}
                  >
                    {"Morada"}
                  </div>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__hw1K9)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bLXaY
                    )}
                  >
                    {"Adhemar de Campos"}
                  </div>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__zQ5Wv)}
                    direction={"right" as const}
                    reverse={false}
                    triggerOnce={false}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___5FwFa)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      src={"https://placekitten.com/300/200" as const}
                    />
                  </Reveal>
                </div>
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tilt", "participacao"],
  tilt: ["tilt"],
  participacao: ["participacao"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tilt: typeof Tilt;
  participacao: typeof Participacao;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tilt: makeNodeComponent("tilt"),
    participacao: makeNodeComponent("participacao"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
